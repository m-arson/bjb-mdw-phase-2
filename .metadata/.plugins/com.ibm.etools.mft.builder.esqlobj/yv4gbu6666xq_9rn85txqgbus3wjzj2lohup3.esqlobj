CREATE COMPUTE MODULE MF_MAIN_REST_SAMSAT_SRVC_Process_Req_Message
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-------------------- SET UUID --------------------
		DECLARE uuid CHARACTER;
		IF FIELDNAME(InputRoot.HTTPInputHeader."X-Uuid") IS NOT NULL AND TRIM(InputRoot.HTTPInputHeader."X-Uuid") <> ''
		THEN
			SET InputLocalEnvironment.UUID = InputRoot.HTTPInputHeader."X-Uuid";
		ELSE
			SET uuid = RIGHT(TRIM(
				REPLICATE('0', 24) ||
				InputRoot.JSON.Data.CHANNEL_ID ||
				COALESCE(InputRoot.JSON.Data.MODULE_CODE, '') ||
				InputRoot.JSON.Data.REF_NO ||
				InputRoot.JSON.Data.REQUEST_TIME
			), 24);
			SET InputLocalEnvironment.UUID = BASE64ENCODE(uuid);
		END IF;
		SET OutputLocalEnvironment.UUID = InputLocalEnvironment.UUID;
		-------------------- SET UUID --------------------
		
		
		DECLARE invalidMandatoryField BOOLEAN FALSE;
		
		IF (TRIM(InputRoot.JSON.Data.CHANNEL_ID) = '') OR (InputRoot.JSON.Data.CHANNEL_ID IS NULL) THEN
			SET invalidMandatoryField = TRUE;
		END IF;
		
		
		-------------------- KEEP THE INPUT MESSAGE --------------------
		SET Environment.Variables.details.(JSON.Object)inMessage = InputRoot.JSON.Data;
		-------------------- KEEP THE INPUT MESSAGE --------------------
		
		-------------------- CHECK AND LOAD TABLE PARAMETER --------------------
		IF NOT EXISTS(SAMSAT.Field[]) THEN
			SET Environment.Variables.DB.SAMSAT.Field[] =
				(SELECT 
					T."""ServiceName""" AS ServiceName,
					T."""BasePath""" AS BasePath,
					T."""MessageFormat""" AS MessageFormat,
					T."""Timeout""" AS Timeout,
					T."""TxQueue""" AS TxQueue,
					T."""TxQueue1""" AS TxQueue1,
					T."""TxQueue2""" AS TxQueue2,
					T."""TxQueue3""" AS TxQueue3,
					T."""DestRequestQ""" AS DestRequestQ,
					T."""DestResponseQ""" AS DestResponseQ,
					T."""Param1""" AS Param1,
					T."""Param2""" AS Param2,
					T."""Param3""" AS Param3
				FROM Database.{'T_PARAMETER'} AS T
				WHERE
					T."""SourceSystem""" = SOURCE_SYSTEM AND
					T."""TargetSystem""" = TARGET_SYSTEM);
			
			DECLARE I INTEGER 1;
			DECLARE J INTEGER CARDINALITY(Environment.Variables.DB.SAMSAT.Field[]);
			
			WHILE I <= J DO
				SET SAMSAT.Field[I] = Environment.Variables.DB.SAMSAT.Field[I];
				SET I = I + 1;
			END WHILE;
		END IF;
		-------------------- CHECK AND LOAD TABLE PARAMETER --------------------
		
		-------------------- CHECK AND LOAD TABLE ERROR MAP --------------------
		IF NOT EXISTS(T_ERROR_MAP.Field[]) THEN
			SET Environment.Variables.DB.T_ERROR_MAP.Field[] =
				(SELECT 
					T.MESSAGE_ID,
					T.RC,
					T.RC_GROUP,
					T.HTTP_STATUS,
					T.MESSAGE,
					T."""SourceSystem""" AS SourceSystem,
					T."""TargetSystem""" AS TargetSystem
				FROM Database.{'T_ERROR_MAP'} AS T
				WHERE
					T."""SourceSystem""" = SOURCE_SYSTEM AND
					T."""TargetSystem""" = TARGET_SYSTEM);
			
			DECLARE I INTEGER 1;
			DECLARE J INTEGER CARDINALITY(Environment.Variables.DB.T_ERROR_MAP.Field[]);
			
			WHILE I <= J DO
				SET T_ERROR_MAP.Field[I] = Environment.Variables.DB.T_ERROR_MAP.Field[I];
				SET I = I + 1;
			END WHILE;
		END IF;
		-------------------- CHECK AND LOAD TABLE ERROR MAP --------------------
		
		-------------------- PREPARING LOGGING INPUT --------------------
		CALL PrepareLogMessage(OutputRoot, ApplicationLabel, MessageFlowLabel, NodeLabel, 'input', 'info', InputExceptionList, InputLocalEnvironment, InputRoot);
		PROPAGATE TO LABEL 'LOGGING' DELETE NONE;
		DELETE FIELD OutputRoot.BLOB;
		-------------------- PREPARING LOGGING INPUT --------------------
		
		-------------- GET SERVICE BY SERVICE NAME ----------------------
		DECLARE sName CHARACTER COALESCE(CAST(InputRoot.JSON.Data.TRXTYPE AS CHARACTER) || '_' || CAST(InputRoot.JSON.Data.PEMDA_ID AS CHARACTER), '');
		DECLARE mFormat CHARACTER 'JSON';
		DECLARE dbParam ROW;
		SET dbParam = THE(SELECT T FROM SAMSAT.Field[] AS T WHERE T.ServiceName = sName AND T.MessageFormat = mFormat);
		
		
		IF FIELDNAME(dbParam.ServiceName) IS NULL THEN
			THROW USER EXCEPTION
				CATALOG 'BJBCatalog'
				MESSAGE 1234
				VALUES('No column matches `ServiceName`: ' || sName || ', and `MessageFormat`: ' || mFormat); 
		END IF;
		
		-------------- GET SERVICE BY SERVICE NAME ----------------------
		
		-------------------- KEEP SOME PROPERTIES --------------------
		SET Environment.Variables.details.dbParam = dbParam;
		SET Environment.Variables.details.uuid = InputLocalEnvironment.UUID;
		SET Environment.Variables.details.duplicateTimeout = DUPLICATE_TIMEOUT;
		SET Environment.Variables.details.timeoutMDW = TIMEOUT_MDW;
		SET Environment.Variables.details.correlId = CAST(uuid AS BLOB CCSID 819);
        CALL Split(Environment.Variables.details.dbParam.TxQueue, Environment, '|');
        SET Environment.Variables.details.dbParam.TxQueueReq = Environment.Split[1];
        SET Environment.Variables.details.dbParam.TxQueueRes = Environment.Split[2];
		DELETE FIELD Environment.Split;
		-------------------- KEEP SOME PROPERTIES --------------------
		
		-------------------- PREPARING LOGGING OUTPUT --------------------
		CALL PrepareLogMessage(OutputRoot, ApplicationLabel, MessageFlowLabel, NodeLabel, 'output', 'debug', OutputExceptionList, OutputLocalEnvironment, OutputRoot);
		PROPAGATE TO LABEL 'LOGGING' DELETE NONE;
		DELETE FIELD OutputRoot.BLOB;
		-------------------- PREPARING LOGGING OUTPUT --------------------
		
		-------------------- REASSIGN OUTPUT DATA --------------------
		SET OutputRoot.JSON.Data = InputRoot.JSON.Data;
		-------------------- REASSIGN OUTPUT DATA --------------------
		
		RETURN TRUE;
	END;
END MODULE;