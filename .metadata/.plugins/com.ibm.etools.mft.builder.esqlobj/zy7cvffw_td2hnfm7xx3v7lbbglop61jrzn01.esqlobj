/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
	
		-- <Build ISO Message From DFDL>
		CREATE FIRSTCHILD OF InputRoot.XMLNSC.isomsg NAME 'Length' VALUE '9999';
		
		SET OutputRoot.Properties.MessageType = '{}:isomsg';
		CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL');
		DECLARE InRef REFERENCE TO InputRoot.XMLNSC;

		SET OutputRoot.DFDL = InRef;
		CREATE NEXTSIBLING OF OutputRoot.DFDL.isomsg.MTI NAME 'PrimaryBitmap';
		DECLARE DFDLPointer REFERENCE TO OutputRoot.DFDL.isomsg.PrimaryBitmap;
		
		-- <Populate Primary Bitmap ISO>
		CALL PopulatePrimaryBitmap(DFDLPointer);
		-- </Populate Primary Bitmap ISO>

		DECLARE SecondaryBitmap BOOLEAN FALSE;
		IF CAST(SUBSTRING(FIELDNAME(OutputRoot.DFDL.isomsg.*[<]) AFTER 'd') AS INT) > 64 THEN
			SET SecondaryBitmap = TRUE;
		END IF;
		
		-- <Check There is SecondaryBitmap>
		IF SecondaryBitmap THEN
			-- This means a SecondaryBitmap will be required
			CREATE NEXTSIBLING OF OutputRoot.DFDL.isomsg.PrimaryBitmap NAME 'SecondaryBitmap';
			MOVE DFDLPointer TO OutputRoot.DFDL.isomsg.SecondaryBitmap;
			CALL PopulateSecondaryBitmap(DFDLPointer);

			SET OutputRoot.DFDL.isomsg.PrimaryBitmap.Bits001to004 = '8';
		ELSE
			MOVE DFDLPointer TO OutputRoot.DFDL.isomsg.PrimaryBitmap;
			-- SecondaryBitmap is not present. Logical Bit001 will already be initialised to 0.
		END IF;
		-- </Check There is SecondaryBitmap>

		CALL UpdateBitmapsBasedOnAvailableFields(DFDLPointer);
		-- Serialize DFDL to BLOB
		SET OutputRoot.BLOB.BLOB = ASBITSTREAM(OutputRoot.DFDL CCSID 1208 SET '{MDW_ACE_SLIB}' TYPE '{}:isomsg' OPTIONS RootBitStream);
		DELETE FIELD OutputRoot.DFDL;
		-- ISONL = ISO WITH DEFAULT LENGTH
		DECLARE ISONL CHARACTER CAST(OutputRoot.BLOB.BLOB AS CHARACTER CCSID 1208 Encoding 815);

		DECLARE ISO CHARACTER;
		CALL GenerateISOLength(ISONL , ISO);
		-- </Build ISO Message From DFDL>
		
		DELETE FIELD OutputRoot.BLOB;
		
		-- <Send ISO To VLINK>
		SET OutputRoot.BLOB.BLOB = CAST(ISO AS BLOB CCSID 1208);
		
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE GenerateISOMessage(IN iRef REFERENCE, IN oRef REFERENCE, IN msgDomain CHARACTER, IN msgType CHARACTER)
	BEGIN
		IF FIELDNAME(iRef.Length) IS NULL THEN
			CREATE FIRSTCHILD OF iRef NAME 'Length' VALUE '9999';
		ELSE
			SET iRef.Length = '9999';
		END IF;
		
		SET oRef.Properties.MessageType = '{}:' || msgType;
		
		
	END;

	CREATE PROCEDURE GenerateThreeDigitIndex(IN IndexInt INTEGER, OUT IndexChar CHAR)
	BEGIN
		SET IndexChar =
		CASE
			WHEN IndexInt < 10 THEN ('00' || CAST(IndexInt AS CHAR))
			WHEN IndexInt < 100 THEN ('0' || CAST(IndexInt AS CHAR))
			ELSE CAST(IndexInt AS CHAR)
		END;
	END;

	CREATE PROCEDURE RemoveUnrequiredXMLAttributes(INOUT InRef REFERENCE)
	BEGIN
		SET InRef.XMLNSC.*:XmlDeclaration = NULL;
		DECLARE NumberRootAttributes INTEGER CARDINALITY(InRef.XMLNSC.isomsg.(XMLNSC.Attribute)*[]);
		DECLARE I1 INTEGER 1;
		WHILE I1 <= NumberRootAttributes DO
			SET InRef.XMLNSC.isomsg.(XMLNSC.Attribute)*[1] = NULL;
			SET I1 = I1 + 1;
		END WHILE;
	END;

	CREATE PROCEDURE PopulatePrimaryBitmap(INOUT DFDLPointer REFERENCE)
	BEGIN
		DECLARE I2 INTEGER 1;
		DECLARE IndexChar1 CHAR;
		DECLARE IndexChar2 CHAR;
		WHILE I2 < 65 DO
			CALL GenerateThreeDigitIndex(I2, IndexChar1);
			CALL GenerateThreeDigitIndex(I2+3, IndexChar2);
			CREATE LASTCHILD OF DFDLPointer NAME ('Bits' || IndexChar1 || 'to' || IndexChar2) VALUE '0';
			SET I2 = I2 + 4;
		END WHILE;
	END;

	CREATE PROCEDURE PopulateSecondaryBitmap(INOUT DFDLPointer REFERENCE)
	BEGIN
		DECLARE J INTEGER 65;
		DECLARE IndexChar1 CHAR;
		DECLARE IndexChar2 CHAR;
		WHILE J < 129 DO
			CALL GenerateThreeDigitIndex(J, IndexChar1);
			CALL GenerateThreeDigitIndex(J+3, IndexChar2);
			CREATE LASTCHILD OF DFDLPointer NAME ('Bits' || IndexChar1 || 'to' || IndexChar2) VALUE '0';
			SET J = J + 4;
		END WHILE;
	END;

	CREATE PROCEDURE UpdateBitmapsBasedOnAvailableFields(INOUT DFDLPointer REFERENCE)
	BEGIN
		DECLARE BitName CHAR;
		DECLARE BitMapName CHAR 'PrimaryBitmap';
		DECLARE CurrentFieldName CHAR;
		DECLARE CurrentFieldNumber INT;
		DECLARE CurrentFieldBase INT;
		DECLARE IndexChar1 CHAR;
		DECLARE IndexChar2 CHAR;
		DECLARE Value INT;
		DECLARE CharValue CHAR;

		MOVE DFDLPointer NEXTSIBLING;
		WHILE LASTMOVE(DFDLPointer) DO
			SET CurrentFieldName = FIELDNAME(DFDLPointer);
			SET CurrentFieldNumber = CAST(SUBSTRING(CurrentFieldName AFTER 'd') AS INT);
			SET CurrentFieldBase = FLOOR((CurrentFieldNumber - 1) / 4) * 4 + 1;
			SET Value = CAST(POWER(2, 3 - MOD(CurrentFieldNumber - 1, 4)) AS INT);
			CALL GenerateThreeDigitIndex(CurrentFieldBase, IndexChar1);
			CALL GenerateThreeDigitIndex(CurrentFieldBase + 3, IndexChar2);
			SET BitName = 'Bits' || IndexChar1 || 'to' || IndexChar2;
			IF CurrentFieldNumber > 64 THEN
				SET BitMapName = 'SecondaryBitmap';
			END IF;
			
			SET CharValue = OutputRoot.DFDL.isomsg.{BitMapName}.{BitName};
			SET CharValue = '000000000000000' || CharValue;
			SET Value = CAST(CAST(CharValue AS BLOB) AS INT) + Value;
			SET CharValue = CAST(CAST(Value AS BLOB) AS CHAR);
			SET CharValue = UPPER(SUBSTRING(CharValue FROM 18 FOR 1));
			SET OutputRoot.DFDL.isomsg.{BitMapName}.{BitName} = CharValue;

			MOVE DFDLPointer NEXTSIBLING;
		END WHILE;
	END;

	CREATE PROCEDURE GenerateISOLength (IN ISONL CHARACTER, INOUT ISO CHARACTER)
	BEGIN
		SET ISO = SUBSTRING (ISONL AFTER '9999');
		DECLARE LISO INTEGER LENGTH(ISO);

		IF LISO < 10 THEN
			SET ISO = '000' || CAST(LISO AS CHARACTER) || ISO;
		ELSEIF LISO < 100 THEN
			SET ISO = '00' || CAST(LISO AS CHARACTER) || ISO;
		ELSEIF LISO < 1000 THEN
			SET ISO = '0' || CAST(LISO AS CHARACTER) || ISO;
		ELSE
			SET ISO = CAST(LISO AS CHARACTER) || ISO;
		END IF;
	END;
