/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		-- Save input data and other propeties
		SET Environment.Variables.details = InputRoot.MQRFH2.usr.vs.details;
		SET Environment.Variables.details.correlId = InputRoot.MQMD.CorrelId;
		SET Environment.Variables.details.timeoutMDW = TIMEOUT_SERVICE;
		SET Environment.Variables.details.qExpiry = Q_EXPIRY;
		SET Environment.Variables.inMessage = InputRoot.JSON.Data;
		
		-- Set flow UUID
		 SET InputLocalEnvironment.UUID = Environment.Variables.details.uuid;
		 SET OutputLocalEnvironment.UUID = InputLocalEnvironment.UUID;
		
		-- Check and load table error map
		IF NOT EXISTS(T_ERROR_MAP.Field[]) THEN
			SET Environment.Variables.DB.T_ERROR_MAP.Field[] =
				(SELECT 
					T.MESSAGE_ID,
					T.RC,
					T.RC_GROUP,
					T.HTTP_STATUS,
					T.MESSAGE,
					T."""SourceSystem""" AS SourceSystem,
					T."""TargetSystem""" AS TargetSystem
				FROM Database.{'T_ERROR_MAP'} AS T);
			
			DECLARE I INTEGER 1;
			DECLARE J INTEGER CARDINALITY(Environment.Variables.DB.T_ERROR_MAP.Field[]);
			
			WHILE I <= J DO
				SET T_ERROR_MAP.Field[I] = Environment.Variables.DB.T_ERROR_MAP.Field[I];
				SET I = I + 1;
			END WHILE;
		END IF;
		
		-- Load Service destination parameter
		IF FIELDTYPE(SERVICE_PARAM.TxQueueRes) IS NULL
		THEN
			SET Environment.Variables.SERVICE_PARAM =
				THE(SELECT 
					T."""ServiceName""" AS ServiceName,
					T."""BasePath""" AS BasePath,
					T."""Timeout""" AS Timeout,
					T."""TxQueue""" AS TxQueue,
					T."""DestRequestQ""" AS DestRequestQ,
					T."""DestResponseQ""" AS DestResponseQ,
					T."""Param1""" AS Param1,
					T."""Param2""" AS Param2,
					T."""Param3""" AS Param3
				FROM Database.{'T_PARAMETER'} AS T
				WHERE T."""ServiceName""" = SERVICE_NAME);
				
			SET SERVICE_PARAM = Environment.Variables.SERVICE_PARAM;
			SET SERVICE_PARAM.TxQueueRes = SUBSTRING(Environment.Variables.SERVICE_PARAM.TxQueue AFTER '|');
		END IF;
		
		SET Environment.Variables.details.dbParam = SERVICE_PARAM;
		
		-- Logging input
		CALL PrepareLogMessage(OutputRoot, ApplicationLabel, MessageFlowLabel, NodeLabel, 'input', 'debug', InputExceptionList, InputLocalEnvironment, InputRoot);
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		DELETE FIELD OutputRoot.BLOB;
		
		-- Declare I/O Reference
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Object)Data;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE envReff REFERENCE TO Environment.Variables.details;
		DECLARE ts CHARACTER CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMss');
		DECLARE st CHARACTER ST;
		
		X: BEGIN ATOMIC READ WRITE
			SET ST = ST + 1;
		END X;
		
		DECLARE outData ROW;
		
		IF FIELDTYPE(inRef.ACC_DBT) IS NULL OR TRIM(inRef.ACC_DBT) = '' OR inRef.ACC_DBT IS NULL THEN
			DELETE FIELD OutputRoot.JSON;
			
			SET OutputRoot.MQMD.CorrelId = CAST(Environment.Variables.details.correlId AS BLOB);
			DECLARE errorMap ROW;			
			CALL GetErrorDetails(T_ERROR_MAP, errorMap, 'FIELD_REQUIRED', SOURCE_SYSTEM, TARGET_SYSTEM);
			SET OutputRoot.MQRFH2.usr.vs.httpStatus = errorMap.Field.HTTP_STATUS;

			CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
			CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Object)Data;
			SET OutputRoot.JSON.Data = InputRoot.JSON.Data;
			SET OutputRoot.JSON.Data.RESPONSE_CODE = errorMap.Field.RC;
			SET OutputRoot.JSON.Data.RESPONSE_MESSAGE = errorMap.Field.MESSAGE;
			
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = SERVICE_PARAM.TxQueueRes;
			
			PROPAGATE TO TERMINAL 'out2' DELETE NONE;
			RETURN FALSE;
		END IF;
		
		-- Mapping the request to backend
		CALL Split(envReff.dbParam.Param2, Environment, '|');
		SET outRef.SPPW = COALESCE(Environment.Split[7], '');
		SET outRef.SPPU = Environment.Split[6];
		SET outRef.MPI.ZLDRF1 = COALESCE(inRef.REF_1, '');
		SET outRef.MPI.ZLDRF2 = COALESCE(inRef.REF_2, '');
		SET outRef.MPI.ZLNR1 = COALESCE(inRef.NAR_1, '');
		SET outRef.MPI.ZLEAN1 = COALESCE(inRef.ACC_CDT, '');
		SET outRef.MPI.ZLNR5 = COALESCE(inRef.NAR_5, '');
		SET outRef.MPI.ZLNR3 = COALESCE(inRef.NAR_3, '');
		SET outRef.MPI.ZLREF = COALESCE(inRef.REF_TRX, '');
		SET outRef.MPI.ZLNR2 = COALESCE(inRef.NAR_2, '');
		SET outRef.MPI.ZLNR6 = COALESCE(inRef.NAR_6, '');
		SET outRef.MPI.ZLAMZ2 = COALESCE(inRef.AMOUNT, '');
		SET outRef.MPI.ZLTCD1 = COALESCE(inRef.COD_DBT, '');
		SET outRef.MPI.ZLAMZ1 = COALESCE(inRef.AMOUNT, '');
		SET outRef.MPI.ZLEAN = COALESCE(inRef.ACC_DBT, '');
		SET outRef.MPI.ZLTCD2 = COALESCE(inRef.COD_CDT, '');
		SET outRef.MPI.ZLNR7 = COALESCE(inRef.NAR_7, '');
		SET outRef.PC = COALESCE(Environment.Split[1], '');
		SET outRef.MT = COALESCE(Environment.Split[4], '');
		SET outRef.SID = COALESCE(InputLocalEnvironment.UUID, '');
		SET outRef.CID = COALESCE(inRef.CHANNEL_ID, '');
		SET outRef.ST = COALESCE(SUBSTRING(ts FROM 8 FOR 6) || SUBSTRING(REPLICATE('0', 5) || st FROM LENGTH(st)+1), '');
		SET outRef.FC = COALESCE(Environment.Split[8], '');
		SET outRef.DT = COALESCE(ts, '');
		SET outRef.PCC = COALESCE(Environment.Split[2], '');
		SET outRef.CC = COALESCE(Environment.Split[5], '');
		SET outRef.MC = COALESCE(Environment.Split[3], '');
		
		CREATE LASTCHILD OF outData DOMAIN 'JSON';
		CREATE FIELD outData.JSON.Data IDENTITY (JSON.Object)Data;
		SET outData.JSON.Data = outRef;
		
		DELETE FIELD Environment.Split;
		
		-- Logging output
		CALL PrepareLogMessage(OutputRoot, ApplicationLabel, MessageFlowLabel, NodeLabel, 'output', 'debug', OutputExceptionList, OutputLocalEnvironment, OutputRoot);
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		DELETE FIELD OutputRoot.BLOB;
		
		-- Reassign the value
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Object)Data;
		SET OutputRoot.JSON.Data = outData.JSON.Data;
		
		RETURN TRUE;
	END;
