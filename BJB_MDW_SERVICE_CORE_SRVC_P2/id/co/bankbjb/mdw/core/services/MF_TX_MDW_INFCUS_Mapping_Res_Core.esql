BROKER SCHEMA id.co.bankbjb.mdw.core.services
PATH id.co.bankbjb.mdw.lib;

CREATE COMPUTE MODULE MF_TX_MDW_INFCUS_Mapping_Res_Core
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Keep the UUID
		SET OutputLocalEnvironment.UUID = InputLocalEnvironment.UUID;
		
		-- Logging input
		SET OutputRoot.MQRFH2.usr.vs.log4jConfig = ApplicationLabel;
		CALL LogInputDebug(InputExceptionList, InputLocalEnvironment, InputRoot, OutputRoot);
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		DELETE FIELD OutputRoot.MQRFH2;
		DELETE FIELD OutputRoot.BLOB;
		
		SET OutputRoot.MQMD.CorrelId = CAST(Environment.Variables.details.correlId AS BLOB);
		SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = SERVICE_PARAM.TxQueueRes;
				
		DECLARE errorMap, outData ROW;
		DECLARE httpStatus CHARACTER;
		CREATE LASTCHILD OF outData DOMAIN 'JSON';
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Object)Data;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		
		IF inRef.RC = '0068' THEN
			CALL GetErrorDetails(T_ERROR_MAP, errorMap, 'MDW0068', SOURCE_SYSTEM, TARGET_SYSTEM);
			SET outRef = Environment.Variables.inMessage;
			SET outRef.RESPONSE_CODE = errorMap.Field.RC;
			SET outRef.RESPONSE_MESSAGE = errorMap.Field.MESSAGE;
			SET httpStatus = errorMap.Field.HTTP_STATUS;
		ELSEIF inRef.RC = '0091' THEN
			CALL GetErrorDetails(T_ERROR_MAP, errorMap, 'CANNOT_PUT_TO_CORE', SOURCE_SYSTEM, TARGET_SYSTEM);
			SET outRef = Environment.Variables.inMessage;
			SET outRef.RESPONSE_CODE = errorMap.Field.RC;
			SET outRef.RESPONSE_MESSAGE = errorMap.Field.MESSAGE;
			SET httpStatus = errorMap.Field.HTTP_STATUS;
		ELSE
	        SET outRef.AUTH_TOKEN = COALESCE(Environment.Variables.inMessage.AUTH_TOKEN, '');
			SET outRef.REF_NO = COALESCE(Environment.Variables.inMessage.REF_NO, '');
			SET outRef.MODULE_CODE = COALESCE(inRef.MC, '');
			SET outRef.CHANNEL_ID = COALESCE(inRef.CID, '');
			SET outRef.CIF = COALESCE(inRef.MPI.ZLAN, '');
			SET outRef.RESPONSE_CODE = '';
	        SET outRef.RESPONSE_MESSAGE = '';
	        
	        IF inRef.RC = '0000' THEN
	        	SET outRef.RESPONSE_CODE = '0000';
	        	SET outRef.RESPONSE_MESSAGE = 'success';
	        ELSE
				CALL GetErrorDetails(T_ERROR_MAP, errorMap, inRef.RCMSG."0".MESSAGE_ID, SOURCE_SYSTEM, TARGET_SYSTEM);
				
				IF FIELDTYPE(errorMap.Field) IS NULL
				THEN
					CALL GetErrorDetails(T_ERROR_MAP, errorMap, '*', SOURCE_SYSTEM, TARGET_SYSTEM);
				END IF;
				
				SET outRef.RESPONSE_CODE = errorMap.Field.RC;
				SET outRef.RESPONSE_MESSAGE = errorMap.Field.MESSAGE;
				SET httpStatus = errorMap.Field.HTTP_STATUS;
			END IF;
	        
	        IF inRef.MPO."0".ZLRSP = '1' THEN
				
				DECLARE accInfoData CHARACTER inRef.MPO."0".ZLIREK;
				DECLARE accDealData CHARACTER inRef.MPO."0".ZLIDR;
				
				DECLARE I INTEGER 1;
				DECLARE J INTEGER FLOOR(LENGTH(accInfoData)/45);
				DECLARE K INTEGER FLOOR(LENGTH(accDealData)/38);
				
				DECLARE POS INTEGER 1;
				
				CREATE LASTCHILD OF outRef IDENTITY (JSON.Array) ACC_INFORMATION;
				WHILE I <= J DO
					DECLARE accInfo CHARACTER TRIM(' ' FROM SUBSTRING(accInfoData FROM POS FOR 45));
					
					SET outRef.ACC_INFORMATION.Item[I].ACC_NUM = TRIM(' ' FROM SUBSTRING(accInfo FROM 1 FOR 20));
					SET outRef.ACC_INFORMATION.Item[I].ACC_TYPE = SUBSTRING(accInfo FROM 21 FOR 2);
					SET outRef.ACC_INFORMATION.Item[I].ACC_BAL = SUBSTRING(accInfo FROM 28 FOR 15);
					SET outRef.ACC_INFORMATION.Item[I].ACC_CCY = SUBSTRING(accInfo FROM 43 FOR 3);
					CREATE LASTCHILD OF OutputRoot.JSON.Data.ACC_INFORMATION.Item[I] IDENTITY (JSON.Array) ACC_STATUS;
					
					DECLARE accStatus ROW;
					CREATE LASTCHILD OF accStatus DOMAIN 'JSON';
					CREATE FIELD accStatus.JSON.Data IDENTITY (JSON.Object)Data;
						
					DECLARE KI INTEGER 1;
					DECLARE KJ INTEGER 5;
					DECLARE KK INTEGER 1;
					
					DECLARE check INTEGER;
		
					WHILE KI <= KJ DO
						SET check = POSITION('Y' IN SUBSTRING(accInfo FROM 23 FOR 5) REPEAT KI);
						IF check <> 0 THEN
							SET accStatus.JSON.Data.(JSON.Array)ACC_STATUS.Item[KK] = CASE check
								WHEN 1 THEN 'DORMANT'
								WHEN 2 THEN 'BLOCKED'
								WHEN 3 THEN 'INACTIVE'
								WHEN 4 THEN 'CLOSING'
								WHEN 5 THEN 'ACTIVE'
							END;
							SET KK = KK + 1;
						END IF;
						SET KI = KI + 1;
					END WHILE;
					
					SET outRef.ACC_INFORMATION.Item[I].ACC_STATUS = accStatus.JSON.Data.ACC_STATUS;	
					
					SET POS = POS + 45;
					SET I = I + 1;
				END WHILE;
				
				
				SET I = 1;
				SET POS = 1;
				CREATE LASTCHILD OF outRef IDENTITY (JSON.Array) ACC_DEALREF;
				WHILE I <= K DO
					
					DECLARE accDeal CHARACTER SUBSTRING(accDealData FROM POS FOR 38);
					
					SET outRef.ACC_DEALREF.Item[I].ACC_BRCH = SUBSTRING(accDeal FROM 1 FOR 4);
					SET outRef.ACC_DEALREF.Item[I].DEAL_TYPE = SUBSTRING(accDeal FROM 5 FOR 3);
					SET outRef.ACC_DEALREF.Item[I].DEAL_REFF = SUBSTRING(accDeal FROM 8 FOR 13);
					SET outRef.ACC_DEALREF.Item[I].OUTSTANDING = SUBSTRING(accDeal FROM 21 FOR 15);
					SET outRef.ACC_DEALREF.Item[I].ACC_CCY = SUBSTRING(accDeal FROM 36 FOR 3);
					
					SET POS = POS + 38;
					SET I = I + 1;
				END WHILE;
			ELSE
				CALL GetErrorDetails(T_ERROR_MAP, errorMap, 'KSM2010', SOURCE_SYSTEM, TARGET_SYSTEM);
				SET outRef.RESPONSE_CODE = errorMap.Field.RC;
				SET outRef.RESPONSE_MESSAGE = errorMap.Field.MESSAGE;
				SET httpStatus = errorMap.Field.HTTP_STATUS;
			END IF;
			
	        SET outRef.KSMID = COALESCE(inRef.RCMSG."0".MESSAGE_ID, '');
		END IF;
		
		SET outRef.RESPONSE_TIME = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHmmss');
		SET outData.JSON.(JSON.Object)Data = outRef;
		
		
		-- Logging output
		SET OutputRoot.MQRFH2.usr.vs.log4jConfig = ApplicationLabel;
		CALL LogOutputDebug(OutputExceptionList, OutputLocalEnvironment, OutputRoot, OutputRoot);
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		DELETE FIELD OutputRoot.MQRFH2;
		DELETE FIELD OutputRoot.BLOB;
		
		SET OutputRoot.MQRFH2.usr.vs.httpStatus = httpStatus;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		SET OutputRoot.JSON.(JSON.Object)Data = outData.JSON.Data;
		
		RETURN TRUE;
	END;
END MODULE;
