BROKER SCHEMA id.co.bankbjb.mdw.core.services
PATH id.co.bankbjb.mdw.lib;

CREATE COMPUTE MODULE MF_TX_MDW_TRX_HISTORY_Mapping_Res_Core
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Keep the UUID
		SET OutputLocalEnvironment.UUID = InputLocalEnvironment.UUID;
		
		-- Logging input
		SET OutputRoot.MQRFH2.usr.vs.log4jConfig = ApplicationLabel;
		CALL LogInputDebug(InputExceptionList, InputLocalEnvironment, InputRoot, OutputRoot);
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		DELETE FIELD OutputRoot.MQRFH2;
		DELETE FIELD OutputRoot.BLOB;
		
		SET OutputRoot.MQMD.CorrelId = CAST(Environment.Variables.details.correlId AS BLOB);
		SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = SERVICE_PARAM.TxQueueRes;
				
		DECLARE errorMap, outData ROW;
		DECLARE httpStatus CHARACTER;
		CREATE LASTCHILD OF outData DOMAIN 'JSON';
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Object)Data;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		
		IF inRef.RC = '0068' THEN
			CALL GetErrorDetails(T_ERROR_MAP, errorMap, 'MDW0068', SOURCE_SYSTEM, TARGET_SYSTEM);
			SET outRef = Environment.Variables.inMessage;
			SET outRef.RESPONSE_CODE = errorMap.Field.RC;
			SET outRef.RESPONSE_MESSAGE = errorMap.Field.MESSAGE;
			SET httpStatus = errorMap.Field.HTTP_STATUS;
		ELSEIF inRef.RC = '0091' THEN
			CALL GetErrorDetails(T_ERROR_MAP, errorMap, 'CANNOT_PUT_TO_CORE', SOURCE_SYSTEM, TARGET_SYSTEM);
			SET outRef = Environment.Variables.inMessage;
			SET outRef.RESPONSE_CODE = errorMap.Field.RC;
			SET outRef.RESPONSE_MESSAGE = errorMap.Field.MESSAGE;
			SET httpStatus = errorMap.Field.HTTP_STATUS;
		ELSE
	        SET outRef.CHANNEL_ID = COALESCE(inRef.CID, '');
			SET outRef.AUTH_TOKEN = COALESCE(Environment.Variables.inMessage.AUTH_TOKEN, '');
			SET outRef.REF_NO = COALESCE(Environment.Variables.inMessage.REF_NO, '');
			SET outRef.MODULE_CODE = COALESCE(inRef.MC, '');
			SET outRef.ACC_NUM = COALESCE(Environment.Variables.inMessage.ACC_NUM, '');
			SET outRef.FROM_DATE = COALESCE(Environment.Variables.inMessage.FROM_DATE, '');
			SET outRef.TO_DATE = COALESCE(Environment.Variables.inMessage.TO_DATE, '');
			
			DECLARE I INTEGER 1;
			DECLARE J INTEGER CARDINALITY(inRef.MPO.*[])-1;
			
			CREATE FIELD outRef.DETAIL_DATA IDENTITY (JSON.Array) DETAIL_DATA;
			
			WHILE I <= J DO
				DECLARE INX CHARACTER I;
			    CREATE FIELD outRef.DETAIL_DATA.Item[I].TRX_DES TYPE NameValue VALUE COALESCE(inRef.MPO.{INX}.ZHTIT2, '');
			    CREATE FIELD outRef.DETAIL_DATA.Item[I].LAST_DATE_STMN TYPE NameValue VALUE COALESCE(inRef.MPO.{INX}.ZHSDAT, '');
			    CREATE FIELD outRef.DETAIL_DATA.Item[I].DATE_POSTED TYPE NameValue VALUE COALESCE(inRef.MPO.{INX}.ZHPOD, '');
			    CREATE FIELD outRef.DETAIL_DATA.Item[I].AMOUNT_DBT TYPE NameValue VALUE COALESCE(inRef.MPO.{INX}.ZHAMDR, '');
			    CREATE FIELD outRef.DETAIL_DATA.Item[I].AMOUNT_CDT TYPE NameValue VALUE COALESCE(inRef.MPO.{INX}.ZHAMCR, '');
			    CREATE FIELD outRef.DETAIL_DATA.Item[I].RUNNING_BAL TYPE NameValue VALUE COALESCE(inRef.MPO.{INX}.ZHRBAL, '');
			    CREATE FIELD outRef.DETAIL_DATA.Item[I].TRX_COD TYPE NameValue VALUE COALESCE(inRef.MPO.{INX}.ZHTCD, '');
			    CREATE FIELD outRef.DETAIL_DATA.Item[I].USR_TRX_REF TYPE NameValue VALUE COALESCE(inRef.MPO.{INX}.ZHDRF, '');
			    CREATE FIELD outRef.DETAIL_DATA.Item[I].NAR1 TYPE NameValue VALUE COALESCE(inRef.MPO.{INX}.ZHNR, '');
			    CREATE FIELD outRef.DETAIL_DATA.Item[I].NAR2 TYPE NameValue VALUE COALESCE(inRef.MPO.{INX}.ZHNAR2, '');
			    CREATE FIELD outRef.DETAIL_DATA.Item[I].NAR3 TYPE NameValue VALUE COALESCE(inRef.MPO.{INX}.ZHNAR3, '');
			    CREATE FIELD outRef.DETAIL_DATA.Item[I].NAR4 TYPE NameValue VALUE COALESCE(inRef.MPO.{INX}.ZHNAR4, '');
			    SET I = I + 1;
			END WHILE;
			
			SET outRef.HASMORE =
			CASE inRef.RCMSG."0".MESSAGE_ID
				WHEN 'KSM1001' THEN 'N'
				ELSE 'Y'
			END;
	        
	        IF inRef.RC = '0000' THEN
	        	SET outRef.RESPONSE_CODE = '0000';
	        	SET outRef.RESPONSE_MESSAGE = 'success';
	        ELSE
				CALL GetErrorDetails(T_ERROR_MAP, errorMap, inRef.RCMSG."0".MESSAGE_ID, SOURCE_SYSTEM, TARGET_SYSTEM);
				
				IF FIELDTYPE(errorMap.Field) IS NULL
				THEN
					CALL GetErrorDetails(T_ERROR_MAP, errorMap, '*', SOURCE_SYSTEM, TARGET_SYSTEM);
				END IF;
				
				SET outRef.RESPONSE_CODE = errorMap.Field.RC;
				SET outRef.RESPONSE_MESSAGE = errorMap.Field.MESSAGE;
				SET httpStatus = errorMap.Field.HTTP_STATUS;
			END IF;
			
	        SET outRef.KSMID = COALESCE(inRef.RCMSG."0".MESSAGE_ID, '');
		END IF;
		
		SET outRef.RESPONSE_TIME = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHmmss');
		SET outData.JSON.(JSON.Object)Data = outRef;
		
		-- Logging output
		SET OutputRoot.MQRFH2.usr.vs.log4jConfig = ApplicationLabel;
		CALL LogOutputDebug(OutputExceptionList, OutputLocalEnvironment, OutputRoot, OutputRoot);
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		DELETE FIELD OutputRoot.MQRFH2;
		DELETE FIELD OutputRoot.BLOB;
		
		SET OutputRoot.MQRFH2.usr.vs.httpStatus = httpStatus;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		SET OutputRoot.JSON.(JSON.Object)Data = outData.JSON.Data;
		
		RETURN TRUE;
	END;
END MODULE;
