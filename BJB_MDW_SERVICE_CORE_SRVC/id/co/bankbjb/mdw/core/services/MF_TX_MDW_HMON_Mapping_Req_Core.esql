BROKER SCHEMA id.co.bankbjb.mdw.core.services
PATH id.co.bankbjb.mdw.lib;

CREATE COMPUTE MODULE MF_TX_MDW_HMON_Mapping_Req_Core
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Save input data and other propeties
		SET Environment.Variables.details = InputRoot.MQRFH2.usr.vs.details;
		SET Environment.Variables.details.correlId = InputRoot.MQMD.CorrelId;
		SET Environment.Variables.details.timeoutMDW = TIMEOUT_SERVICE;
		SET Environment.Variables.inMessage = InputRoot.JSON.Data;
		
		-- Set flow UUID
		 SET InputLocalEnvironment.UUID = Environment.Variables.details.uuid;
		 SET OutputLocalEnvironment.UUID = InputLocalEnvironment.UUID;
		
		-- Check and load table error map
		IF NOT EXISTS(T_ERROR_MAP.Field[]) THEN
			DECLARE dataSource CHARACTER DataSource;
			SET Environment.Variables.DB.T_ERROR_MAP.Field[] = PASSTHRU('SELECT * FROM ' || DB_SCHEMA || '.T_ERROR_MAP' TO Database.{dataSource});
			
			DECLARE I INTEGER 1;
			DECLARE J INTEGER CARDINALITY(Environment.Variables.DB.T_ERROR_MAP.Field[]);
			
			WHILE I <= J DO
				SET T_ERROR_MAP.Field[I] = Environment.Variables.DB.T_ERROR_MAP.Field[I];
				SET I = I + 1;
			END WHILE;
			
			DELETE FIELD Environment.Variables.DB;
		END IF;
		
		-- Load Service destination parameter
		IF SERVICE_PARAM IS NULL OR TRIM(SERVICE_PARAM) = ''
		THEN
			DECLARE dataSource CHARACTER DataSource;
			SET Environment.Variables.SERVICE_PARAM[] =
				PASSTHRU('SELECT * FROM ' || DB_SCHEMA || '.T_PARAMETER WHERE "ServiceName" = ' || SERVICE_NAME TO Database.{dataSource});
			SET SERVICE_PARAM = Environment.Variables.SERVICE_PARAM;
			SET SERVICE_PARAM.TxQueueRes = SUBSTRING(Environment.Variables.SERVICE_PARAM.TxQueue AFTER '|');
		END IF;
		
		SET Environment.Variables.details.dbParam = SERVICE_PARAM;
		DELETE FIELD Environment.Variables.SERVICE_PARAM;
		
		-- Logging input
		SET OutputRoot.MQRFH2.usr.vs.log4jConfig = ApplicationLabel;
		CALL LogInputDebug(InputExceptionList, InputLocalEnvironment, InputRoot, OutputRoot);
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		DELETE FIELD OutputRoot.MQRFH2;
		DELETE FIELD OutputRoot.BLOB;
		
		-- Declare I/O Reference
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Object)Data;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE envReff REFERENCE TO Environment.Variables.details;
		DECLARE ts CHARACTER CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMss');
		DECLARE st CHARACTER ST;
		
		X: BEGIN ATOMIC READ WRITE
			SET ST = ST + 1;
		END X;
		
		DECLARE invalidJSON BOOLEAN FALSE;
		DECLARE outData ROW;
		
		IF (FIELDTYPE(inRef.FRMACT) IS NULL OR TRIM(inRef.FRMACT) = '' OR inRef.FRMACT IS NULL ) AND invalidJSON = FALSE THEN
			SET invalidJSON = TRUE;
		END IF;
--		IF (FIELDTYPE(inRef.TOACT) IS NULL OR TRIM(inRef.TOACT) = '' OR inRef.TOACT IS NULL ) AND invalidJSON = FALSE THEN
--			SET invalidJSON = TRUE;
--		END IF;
		IF (FIELDTYPE(inRef.AMOUNT) IS NULL OR TRIM(inRef.AMOUNT) = '' OR inRef.AMOUNT IS NULL ) AND invalidJSON = FALSE THEN
			SET invalidJSON = TRUE;
		END IF;
		IF (FIELDTYPE(inRef.CRTCOD) IS NULL OR TRIM(inRef.CRTCOD) = '' OR inRef.CRTCOD IS NULL ) AND invalidJSON = FALSE THEN
			SET invalidJSON = TRUE;
		END IF;
		IF (FIELDTYPE(inRef.DBTCOD) IS NULL OR TRIM(inRef.DBTCOD) = '' OR inRef.DBTCOD IS NULL ) AND invalidJSON = FALSE THEN
			SET invalidJSON = TRUE;
		END IF;
		
		IF invalidJSON THEN
			DELETE FIELD OutputRoot.JSON;
			
			SET OutputRoot.MQMD.CorrelId = CAST(Environment.Variables.details.correlId AS BLOB);
			DECLARE errorMap ROW;			
			CALL GetErrorDetails(T_ERROR_MAP, errorMap, 'FIELD_REQUIRED', SOURCE_SYSTEM, TARGET_SYSTEM);
			SET OutputRoot.MQRFH2.usr.vs.httpStatus = errorMap.Field.HTTP_STATUS;

			CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
			CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Object)Data;
			SET OutputRoot.JSON.Data = InputRoot.JSON.Data;
			SET OutputRoot.JSON.Data.RESPONSE_CODE = errorMap.Field.RC;
			SET OutputRoot.JSON.Data.RESPONSE_MESSAGE = errorMap.Field.MESSAGE;
			
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = SERVICE_PARAM.TxQueueRes;
			
			PROPAGATE TO TERMINAL 'out2' DELETE NONE;
			RETURN FALSE;
		END IF;
		
		-- Mapping the request to backend
		CALL Split(envReff.dbParam.Param2, Environment, '|');
		SET outRef.MPI.CRDTYP = COALESCE(inRef.CRDTYP, '');
		SET outRef.MPI.STRFLG1 = COALESCE(inRef.STRFLG1, '');
		SET outRef.MPI.NUMFLD1 = COALESCE(inRef.NUMFLD1, '');
		SET outRef.MPI.ACQUER = COALESCE(inRef.ACQUER, '');
		SET outRef.MPI.NUMFLD3 = COALESCE(inRef.NUMFLD3, '');
		SET outRef.MPI.DBTCOD = COALESCE(inRef.DBTCOD, '');
		SET outRef.MPI.CARDNO = COALESCE(inRef.CARDNO, '');
		SET outRef.MPI.DECPOS = COALESCE(inRef.DECPOS, '');
		SET outRef.MPI.NUMFLD2 = COALESCE(inRef.NUMFLD2, '');
		SET outRef.MPI.NUMFLD5 = COALESCE(inRef.NUMFLD5, '');
		SET outRef.MPI.CHNTYP = COALESCE(inRef.CHNTYP, '');
		SET outRef.MPI.FRMACT = COALESCE(inRef.FRMACT, '');
		SET outRef.MPI.NUMFLD4 = COALESCE(inRef.NUMFLD4, '');
		SET outRef.MPI.TRACE = COALESCE(inRef.TRACE, '');
		IF FIELDTYPE(inRef.STRFLD1) IS NOT NULL
		THEN
			SET outRef.MPI.STRFLD1 = inRef.STRFLD1;
		END IF;
		IF FIELDTYPE(inRef.STRFLD2) IS NOT NULL
		THEN
			SET outRef.MPI.STRFLD2 = inRef.STRFLD2;
		END IF;
		IF FIELDTYPE(inRef.STRFLD3) IS NOT NULL
		THEN
			SET outRef.MPI.STRFLD3 = inRef.STRFLD3;
		END IF;
		
		SET outRef.MPI.STRFLD6 = COALESCE(inRef.STRFLD6, '');
		SET outRef.MPI.REVERS = COALESCE(inRef.REVERS, '');
		SET outRef.MPI.ACQLOC = COALESCE(inRef.ACQLOC, '');
		SET outRef.MPI.TRTYPE = COALESCE(inRef.TRTYPE, '');
		SET outRef.MPI.ISSUER = COALESCE(inRef.ISSUER, '');
		SET outRef.MPI.EDITFL = COALESCE(inRef.EDITFL, '');
		SET outRef.MPI.NUMFLD6 = COALESCE(inRef.NUMFLD6, '');
		SET outRef.MPI.AMOUNT = COALESCE(inRef.AMOUNT, '');
		SET outRef.MPI.TERMID = COALESCE(inRef.TERMID, '');
		SET outRef.MPI.CRTCOD = COALESCE(inRef.CRTCOD, '');
		SET outRef.SID = COALESCE(InputLocalEnvironment.UUID, '');
		SET outRef.CID = COALESCE(inRef.CHANNEL_ID, '');
		SET outRef.ST = COALESCE(SUBSTRING(ts FROM 8 FOR 6) || SUBSTRING('00000' || st FROM LENGTH(st)+1), '');
		SET outRef.FC = COALESCE(Environment.Split[8], '');
		SET outRef.DT = COALESCE(ts, '');
		SET outRef.PCC = COALESCE(Environment.Split[2], '');
		SET outRef.CC = COALESCE(Environment.Split[5], '');
		SET outRef.MC = COALESCE(Environment.Split[3], '');
		
		CREATE LASTCHILD OF outData DOMAIN 'JSON';
		CREATE FIELD outData.JSON.Data IDENTITY (JSON.Object)Data;
		SET outData.JSON.Data = outRef;
		
		DELETE FIELD Environment.Split;
		
		-- Logging output
		SET OutputRoot.MQRFH2.usr.vs.log4jConfig = ApplicationLabel;
		CALL LogOutputDebug(OutputExceptionList, OutputLocalEnvironment, OutputRoot, OutputRoot);
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		DELETE FIELD OutputRoot.MQRFH2;
		DELETE FIELD OutputRoot.BLOB;
		
		-- Reassign the value
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Object)Data;
		SET OutputRoot.JSON.Data = outData.JSON.Data;
		
		RETURN TRUE;
	END;
END MODULE;
